{"version":3,"sources":["redux/side-effects/actions.ts","redux/side-effects/constants.ts","components/side-bar/index.tsx","components/info-setup/index.tsx","components/drag-marker/index.tsx","components/drop-marker/index.tsx","redux/form/actions.ts","redux/form/constants.ts","components/form-col/index.tsx","components/text/index.tsx","components/select/index.tsx","components/form-row/index.tsx","components/form/index.tsx","components/data-view/index.tsx","components/modals/edit-col-modal/index.tsx","components/modals/edit-text-modal/index.tsx","components/modals/edit-select-modal/index.tsx","App.tsx","redux/form/reducer.ts","redux/side-effects/index.ts","redux/rootReducer.ts","redux/index.ts","index.tsx"],"names":["showEditCol","createAction","showEditTextField","showEditSelect","activateDrag","connect","dispatch","d","handleDragStart","type","ev","dataTransfer","setData","onDragEnd","active","className","ListGroup","Item","children","onDragStart","draggable","InfoSetup","title","right","left","onRemove","onEdit","style","onClick","icon","faWrench","faTimes","defaultProps","store","status","sideEffect","componentDrag","componentName","dragMarkerClasses","classNames","dragMarkerWrapClasses","DropMarker","handleAllowDrop","handleDrop","dragComponent","onDragLeave","position","onDragOver","onDrop","createRow","deleteRow","createCol","removeCol","editCol","removeColChild","createText","editText","createSelect","editSelect","onCreateText","onRemoveCol","c","col","rid","props","Col","e","preventDefault","data","getData","alert","cid","id","onShowEditTextField","onEditText","name","text","FormControl","value","onChange","tid","key","target","onShowEditSelect","select","size","selected","as","custom","defaultValue","disabled","hidden","values","map","v","onDropCol","rowId","row","Row","sm","ch","rows","form","onDropRow","r","Container","uniqid","renderData","reduce","acc","push","editColModal","hideModal","onEditCol","useState","setValue","useEffect","Modal","show","onHide","Header","closeButton","Title","Body","htmlFor","InputGroup","Number","placeholder","Footer","Button","variant","editTextModal","editSelectModal","onEditSelect","setValues","setName","onDelete","filter","FormGroup","width","display","marginLeft","marginTop","find","App","initialState","createReducer","builder","addCase","state","action","payload","currentRow","updatedRow","currentCol","updatedCol","currentText","updatedText","currentSelect","combineReducers","reducer","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98a794cd.chunk.js","sourcesContent":["import {createAction} from \"@reduxjs/toolkit\";\nimport * as constants from \"../side-effects/constants\";\nimport {ICol, ISelect, IText} from \"../form/reducer\";\n\nexport const showEditCol = createAction<{ c: ICol, rid: string } | null>(constants.EDIT_COL_MODAL)\nexport const showEditTextField = createAction<{ c: IText, rid: string, cid: string } | null>(constants.EDIT_TEXT_MODAL)\nexport const showEditSelect = createAction<{ c: ISelect, rid: string, cid: string } | null>(constants.EDIT_SELECT_MODAL)\n\nexport const activateDrag = createAction<{ type?: null | string, active?: boolean }>(constants.ACTIVATE_DRAG)\n","export const EDIT_COL_MODAL = 'EDIT_COL_MODAL'\nexport const EDIT_TEXT_MODAL = 'EDIT_TEXT_MODAL'\nexport const EDIT_SELECT_MODAL = 'EDIT_SELECT_MODAL'\n\nexport const ACTIVATE_DRAG = 'ACTIVATE_DRAG'\n","import React from 'react'\nimport {ListGroup} from \"react-bootstrap\";\nimport './styles.css'\nimport {COL, ROW, SELECT, TEXT} from \"../../redux/form/constants\";\nimport {connect} from \"react-redux\";\nimport {activateDrag} from \"../../redux/side-effects/actions\";\n\ninterface IProps {\n    activateDrag: (d: { type?: null | string, active?: boolean }) => void\n}\n\nconst SideBar = ({activateDrag}: IProps) => {\n\n    const handleDragStart = (type: ROW | COL | TEXT | SELECT) => (ev: React.DragEvent<HTMLDivElement>) => {\n        ev.dataTransfer.setData(\"text\", type);\n        activateDrag({type})\n    }\n\n    const onDragEnd = () => activateDrag({type: null, active: false})\n\n    return (\n        <div className={'side-bar'}>\n            <h3><strong>Wigets</strong></h3>\n            <ListGroup className={'wiget_list_group'}>\n                <ListGroup.Item\n                    children={'Row'}\n                    onDragStart={handleDragStart('ROW')}\n                    onDragEnd={onDragEnd}\n                    draggable={true}\n                    className={'wiget_list_item'}\n                />\n                <ListGroup.Item\n                    children={'Col'}\n                    onDragStart={handleDragStart('COL')}\n                    onDragEnd={onDragEnd}\n                    draggable={true}\n                    className={'wiget_list_item'}\n                />\n                <ListGroup.Item\n                    children={'Text'}\n                    onDragStart={handleDragStart('TEXT')}\n                    onDragEnd={onDragEnd}\n                    draggable={true}\n                    className={'wiget_list_item'}\n                />\n                <ListGroup.Item\n                    children={'Select'}\n                    onDragStart={handleDragStart('SELECT')}\n                    onDragEnd={onDragEnd}\n                    draggable={true}\n                    className={'wiget_list_item'}\n                />\n            </ListGroup>\n        </div>\n    )\n}\n\nexport default connect(null, (dispatch) => ({\n    activateDrag: (d: { type?: null | string, active?: boolean }) => dispatch(activateDrag(d))\n}))(SideBar)\n","import React from 'react'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTimes, faWrench} from \"@fortawesome/free-solid-svg-icons\";\nimport './styles.css'\n\ninterface IProps {\n    title: string\n    onRemove?: () => void\n    onEdit?: () => void\n    right?: number\n    left?: number\n\n}\n\nconst InfoSetup = ({title, right, left, onRemove, onEdit}: IProps) => {\n    return (\n        <div style={{right, left}} className={'info_setup'}>\n            <h5 className={'info_setup_title'}>{title}</h5>\n            {onEdit && (\n                <button onClick={onEdit} className={'info_setup__settings_btn'}>\n                    <FontAwesomeIcon icon={faWrench}/>\n                </button>\n            )}\n\n            {onRemove && (\n                <button onClick={onRemove} className={'info_setup__close_btn'}>\n                    <FontAwesomeIcon icon={faTimes}/>\n                </button>\n            )}\n        </div>\n    )\n}\n\nInfoSetup.defaultProps = {\n    right: 15,\n    left: 15\n}\n\nexport default InfoSetup\n","import React from 'react'\nimport {connect} from \"react-redux\";\nimport {IStore} from \"../../redux/rootReducer\";\nimport classNames from 'classnames';\nimport './styles.css'\n\ninterface IProps {\n    status: {\n        type: string | null,\n        active: boolean\n    }\n    componentName: string\n}\n\nconst DragMarker = ({status, componentName}: IProps) => {\n\n    const dragMarkerClasses = classNames('drag-marker', {\n        'active': !!status.type && status.type === componentName,\n        'full-active': status.active\n    })\n\n    const dragMarkerWrapClasses = classNames('drag-marker-wrap', {\n        'none': !status.type,\n    })\n\n    return (\n        <div className={dragMarkerWrapClasses}>\n            <div className={dragMarkerClasses}/>\n        </div>\n    )\n}\n\nexport default connect((store: IStore) => ({\n    status: store.sideEffect.componentDrag,\n}))(DragMarker)\n","import React from 'react'\nimport './styles.css'\nimport DragMarker from \"../drag-marker\";\n\ninterface IProps {\n    title: string\n    handleAllowDrop: (e: React.DragEvent<HTMLDivElement>) => void\n    handleDrop: (e: React.DragEvent<HTMLDivElement>) => void\n    dragComponent: string\n    onDragLeave: (e: React.DragEvent<HTMLDivElement>) => void\n}\n\nconst DropMarker = ({title, handleAllowDrop, handleDrop, dragComponent, onDragLeave}: IProps) => {\n\n\n    return (\n        <div onDragLeave={onDragLeave} style={{position: 'relative'}}\n             onDragOver={handleAllowDrop} onDrop={handleDrop}\n             className={'drop_marker'}>\n            <p>{title}</p>\n            <DragMarker componentName={dragComponent}/>\n        </div>\n    )\n}\n\nexport default DropMarker\n","import {createAction} from '@reduxjs/toolkit'\nimport {IRow, IText} from \"./reducer\";\nimport * as constants from \"./constants\";\n\nexport interface IAction<P> {\n    type: string,\n    payload: P\n}\n\nexport const createRow = createAction<IRow>(constants.CREATE_ROW)\nexport const deleteRow = createAction<string>(constants.DELETE_ROW)\n\nexport const createCol = createAction<string>(constants.CREATE_COL)\nexport const removeCol = createAction<{ rid: string, cid: string }>(constants.DELETE_COL)\nexport const editCol = createAction<{ size: string, cid: string, rid: string }>(constants.EDIT_COL)\nexport const removeColChild = createAction<{ rid: string, cid: string, id: string }>(constants.DELETE_CHILD)\n\nexport const createText = createAction<{ rid: string, cid: string }>(constants.CREATE_TEXT)\nexport const editText = createAction<{ key: string, value: string, rid: string, cid: string, tid: string }>(constants.EDIT_TEXT)\n\nexport const createSelect = createAction<{ rid: string, cid: string }>(constants.CREATE_SELECT)\nexport const editSelect = createAction<{ key: string, value: string[] | string, rid: string, cid: string, id: string }>(constants.EDIT_SELECT)\n","export type FORM = 'FORM'\nexport type ROW = 'ROW'\nexport type COL = 'COL'\nexport type TEXT = 'TEXT'\nexport type SELECT = 'SELECT'\n\nexport const CREATE_ROW = 'CREATE_ROW'\nexport const EDIT_ROW = 'EDIT_ROW'\nexport const DELETE_ROW = 'DELETE_ROW'\n\nexport const CREATE_COL = 'CREATE_COL'\nexport const EDIT_COL = 'EDIT_COL'\nexport const DELETE_COL = 'DELETE_COL'\nexport const DELETE_CHILD = 'DELETE_CHILD'\n\n\nexport const CREATE_TEXT = 'CREATE_TEXT'\nexport const EDIT_TEXT = 'EDIT_TEXT'\n\nexport const CREATE_SELECT = 'CREATE_SELECT'\nexport const EDIT_SELECT = 'EDIT_SELECT'\n\n\n","import React from 'react'\nimport {Col, ColProps} from \"react-bootstrap\";\nimport InfoSetup from \"../info-setup\";\nimport './styles.scss'\nimport {ICol} from \"../../redux/form/reducer\";\nimport {connect} from \"react-redux\";\nimport {createSelect, createText, removeCol} from \"../../redux/form/actions\";\nimport {activateDrag, showEditCol} from \"../../redux/side-effects/actions\";\nimport DragMarker from \"../drag-marker\";\n\ninterface IProps extends ColProps {\n    rid: string\n    col: ICol\n    onCreateText: (d: { rid: string, cid: string }) => void\n    onRemoveCol: (d: { rid: string, cid: string }) => void\n    showEditCol: (c: { c: ICol, rid: string } | null) => void\n    createSelect: (d: { rid: string, cid: string }) => void\n    activateDrag: (d: { type?: null | string, active?: boolean }) => void\n}\n\nconst FormCol = ({\n                     children,\n                     onRemoveCol,\n                     col,\n                     onCreateText,\n                     rid,\n                     showEditCol,\n                     createSelect,\n                     activateDrag,\n                     ...props\n                 }: IProps) => {\n\n    const handleRemove = () => {\n        onRemoveCol({\n            rid,\n            cid: col.id\n        })\n    }\n\n    const handleCreateText = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault()\n        const data = e.dataTransfer.getData(\"text\");\n\n\n        if (data === 'TEXT') {\n            onCreateText({\n                rid,\n                cid: col.id\n            })\n            return;\n        }\n\n        if (data === 'SELECT') {\n            createSelect({\n                rid,\n                cid: col.id\n            })\n            return\n        }\n        alert(\"You can't put in the col\")\n\n    }\n\n    const handleAllowDrop = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault()\n        activateDrag({active: true})\n    }\n\n    const handleShowModal = () => {\n        showEditCol({c: col, rid})\n    }\n\n    const handleDragLeave = () => activateDrag({active: false})\n\n    return (\n        <Col onDragLeave={handleDragLeave} onDragOver={handleAllowDrop} onDrop={handleCreateText} {...props}\n             className={'form_col'}>\n            <div className={'form_col_cont'}>\n                <InfoSetup onEdit={handleShowModal} title={'Col'} onRemove={handleRemove}/>\n                {children}\n                <DragMarker componentName={'TEXT'}/>\n                <DragMarker componentName={'SELECT'}/>\n            </div>\n        </Col>\n    )\n}\n\nexport default connect(null, (dispatch) => ({\n    createSelect: (d: { rid: string, cid: string }) => dispatch(createSelect(d)),\n    onCreateText: (d: { rid: string, cid: string }) => dispatch(createText(d)),\n    onRemoveCol: (d: { rid: string, cid: string }) => dispatch(removeCol(d)),\n    showEditCol: (c: { c: ICol, rid: string } | null) => dispatch(showEditCol(c)),\n    activateDrag: (d: { type?: null | string, active?: boolean }) => dispatch(activateDrag(d))\n}))(FormCol)\n","import React from 'react'\nimport InfoSetup from \"../info-setup\";\nimport './styles.css'\nimport {editText, removeColChild} from \"../../redux/form/actions\";\nimport {connect} from \"react-redux\";\nimport {IText} from \"../../redux/form/reducer\";\nimport {showEditTextField} from \"../../redux/side-effects/actions\";\nimport {FormControl} from \"react-bootstrap\";\n\ninterface IProps {\n    rid: string\n    cid: string\n    name: string\n    text: IText\n    onRemove: (d: { rid: string, cid: string, id: string }) => void\n    onShowEditTextField: (d: { c: IText, rid: string, cid: string } | null) => void\n    onEditText: (d: { key: string, value: string, rid: string, cid: string, tid: string }) => void\n}\n\nconst Text = ({name, rid, cid, text, onRemove, onShowEditTextField, onEditText}: IProps) => {\n\n    const handleRemove = () => onRemove({\n        cid, rid, id: text.id\n    })\n\n    const handleShowEditText = () => onShowEditTextField({\n        cid, rid, c: text\n    })\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => onEditText({\n        rid,\n        cid,\n        tid: text.id,\n        key: 'value',\n        value: e.target.value\n    })\n\n    return (\n        <div className={'text'}>\n            <InfoSetup\n                left={0}\n                right={0}\n                title={name}\n                onRemove={handleRemove}\n                onEdit={handleShowEditText}\n            />\n            <FormControl type=\"text\" value={text.value} onChange={handleChange}/>\n        </div>\n    )\n}\n\nexport default connect(null, (dispatch) => ({\n    onRemove: (d: { rid: string, cid: string, id: string }) => dispatch(removeColChild(d)),\n    onShowEditTextField: (d: { c: IText, rid: string, cid: string } | null) => dispatch(showEditTextField(d)),\n    onEditText: (d: { key: string, value: string, rid: string, cid: string, tid: string }) => dispatch(editText(d))\n}))(Text)\n","import React from 'react'\nimport InfoSetup from \"../info-setup\";\nimport {editText, removeColChild} from \"../../redux/form/actions\";\nimport {connect} from \"react-redux\";\nimport {ISelect} from \"../../redux/form/reducer\";\nimport {FormControl} from \"react-bootstrap\";\nimport {showEditSelect} from \"../../redux/side-effects/actions\";\n\ninterface IProps {\n    rid: string\n    cid: string\n    name: string\n    select: ISelect\n    onRemove: (d: { rid: string, cid: string, id: string }) => void\n    onShowEditSelect: (d: { c: ISelect, rid: string, cid: string } | null) => void\n    onEditText: (d: { key: string, value: string, rid: string, cid: string, tid: string }) => void\n}\n\nconst Select = ({name, rid, cid, select, onRemove, onShowEditSelect, onEditText}: IProps) => {\n    const handleRemove = () => onRemove({\n        cid, rid, id: select.id\n    })\n\n    const handleShowEditText = () => onShowEditSelect({\n        cid, rid, c: select\n    })\n\n    const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => onEditText({\n        rid,\n        cid,\n        tid: select.id,\n        key: 'selected',\n        value: e.target.value\n    })\n    \n    return (\n        <div className={'text'}>\n            <InfoSetup\n                left={0}\n                right={0}\n                title={name}\n                onRemove={handleRemove}\n                onEdit={handleShowEditText}\n            />\n            <FormControl size={'sm'} value={select.selected} onChange={handleChange} as=\"select\" custom>\n                <option value=\"\" defaultValue={'Not chosen'} disabled hidden>Not chosen</option>\n                {select.values.map((v) => <option key={v}>{v}</option>)}\n            </FormControl>\n        </div>\n    )\n}\n\nexport default connect(null, (dispatch) => ({\n    onRemove: (d: { rid: string, cid: string, id: string }) => dispatch(removeColChild(d)),\n    onShowEditSelect: (d: { c: ISelect, rid: string, cid: string } | null) => dispatch(showEditSelect(d)),\n    onEditText: (d: { key: string, value: string, rid: string, cid: string, tid: string }) => dispatch(editText(d))\n}))(Select)\n","import React, {ReactNode} from 'react'\nimport {Row} from \"react-bootstrap\";\nimport './styles.css'\nimport InfoSetup from \"../info-setup\";\nimport DropMarker from \"../drop-marker\";\nimport FormCol from \"../form-col\";\nimport Text from \"../text\";\nimport {IRow, ISelect, IText} from \"../../redux/form/reducer\";\nimport {connect} from \"react-redux\";\nimport {createCol} from \"../../redux/form/actions\";\nimport Select from \"../select\";\nimport {activateDrag} from \"../../redux/side-effects/actions\";\n\ninterface IProps {\n    onRemove: (id: string) => void\n    row: IRow\n    onDropCol: (rid: string) => void\n    children?: ReactNode\n    activateDrag: (d: { type?: null | string, active?: boolean }) => void\n}\n\nconst FormRow = ({children, onRemove, row, onDropCol, activateDrag}: IProps) => {\n    const handleRemove = () => onRemove(row.id)\n    const handleDropCol = (rowId: string) => (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault()\n        const data = e.dataTransfer.getData(\"text\");\n        if (data !== 'COL') {\n            alert(\"You can't drop in the row\")\n            return\n        }\n        onDropCol(rowId)\n\n    }\n    const handleAllowDrop = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault()\n        activateDrag({active: true})\n    }\n\n    const onDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault()\n        activateDrag({active: false})\n    }\n\n    return (\n        <Row className={'form_row'}>\n            <InfoSetup title={'Row'} onRemove={handleRemove}/>\n            {row.children\n                .map((c) => (\n                    <FormCol rid={row.id} key={c.id} sm={c.size} col={c}>\n                        {c.children.map((ch: IText | ISelect) => (\n                            ch.type === 'TEXT' ? (\n                                //@ts-ignore\n                                <Text rid={row.id} cid={c.id} text={ch} key={ch.id} name={ch.name}/>\n                            ) : (\n                                //@ts-ignore\n                                <Select rid={row.id} cid={c.id} select={ch} key={ch.id} name={ch.name}/>\n                            )\n                        ))}\n                    </FormCol>\n                ))}\n            {children || (\n                <DropMarker\n                    title={'Drop Column Here'}\n                    handleAllowDrop={handleAllowDrop}\n                    handleDrop={handleDropCol(row.id)}\n                    dragComponent={'COL'}\n                    onDragLeave={onDragLeave}\n                />\n            )}\n        </Row>\n    )\n}\n\nexport default connect(null,\n    (dispatch) => ({\n        onDropCol: (rid: string) => dispatch(createCol(rid)),\n        activateDrag: (d: { type?: null | string, active?: boolean }) => dispatch(activateDrag(d))\n    }))(FormRow)\n","import React from 'react'\nimport FormRow from \"../form-row\";\nimport uniqid from 'uniqid';\nimport {Container, Row} from \"react-bootstrap\";\nimport './styles.css'\nimport DropMarker from \"../drop-marker\";\nimport {IRow} from \"../../redux/form/reducer\";\nimport {connect} from \"react-redux\";\nimport {IStore} from \"../../redux/rootReducer\";\nimport {createRow, deleteRow} from \"../../redux/form/actions\";\nimport {activateDrag} from \"../../redux/side-effects/actions\";\n\ninterface IProps {\n    rows: IRow[]\n    onDropRow: (r: IRow) => void\n    onRemove: (id: string) => void\n    activateDrag: (d: { type?: null | string, active?: boolean }) => void\n}\n\nconst Form = ({rows, onDropRow, onRemove, activateDrag}: IProps) => {\n\n    const handleDrop = (ev: React.DragEvent<HTMLDivElement>) => {\n        ev.preventDefault();\n        const data = ev.dataTransfer.getData(\"text\");\n        if (data !== 'ROW') {\n            alert(\"You can't drop it in the form\")\n            return\n        }\n\n        onDropRow({\n            id: uniqid(),\n            children: [],\n            type: 'ROW'\n        })\n    }\n\n    const handleAllowDrop = (ev: React.DragEvent<HTMLDivElement>) => {\n        ev.preventDefault();\n        activateDrag({active: true})\n    }\n\n\n    const onDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault()\n       activateDrag({active: false})\n    }\n    return (\n        <>\n            <h3>\n                <strong>Form</strong>\n            </h3>\n            <Container>\n                {rows.map((r) => (\n                    <FormRow row={r} onRemove={onRemove} key={r.id}/>\n                ))}\n                <Row>\n                    <DropMarker\n                        title={'Drop Widget Here'}\n                        handleAllowDrop={handleAllowDrop}\n                        handleDrop={handleDrop}\n                        dragComponent={'ROW'}\n                        onDragLeave={onDragLeave}\n                    />\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default connect(({form}: IStore) => ({\n    rows: form.children\n}), (dispatch) => ({\n    onDropRow: (r: IRow) => dispatch(createRow(r)),\n    onRemove: (rid: string) => dispatch(deleteRow(rid)),\n    activateDrag: (d: { type?: null | string, active?: boolean }) => dispatch(activateDrag(d))\n}))(Form)\n","import React from 'react'\nimport {connect} from \"react-redux\";\nimport {IStore} from \"../../redux/rootReducer\";\nimport {IRow, ISelect, IText} from \"../../redux/form/reducer\";\nimport './styles.css'\n\ninterface IProps {\n    rows: IRow[]\n}\n\nconst DataView = ({rows}: IProps) => {\n    const renderData = rows.reduce((acc: any[], r) => {\n        acc.push(r.children.map((c) => c.children))\n        return acc\n    }, [])\n\n    return (\n        <div className={'data_view'}>\n            <h3><strong>Data</strong></h3>\n\n            {renderData.map((r:[]) => r.map((c: []) => (\n                c.map((ch: ISelect | IText) => (\n                    <div key={ch.id} className={'data_view_cont'}>\n                        <div className={'data_view_key'}>{ch.name}</div>\n                        {/*@ts-ignore*/}\n                        <div className={'data_view_value'}>{ch.selected || ch.value || '---'}</div>\n                    </div>\n                ))\n            )))}\n\n        </div>\n    )\n}\n\nexport default connect((store: IStore) => ({\n    rows: store.form.children\n}))(DataView)\n","import React, {useEffect, useState} from 'react'\nimport {connect} from \"react-redux\";\nimport {IStore} from \"../../../redux/rootReducer\";\nimport {ICol} from \"../../../redux/form/reducer\";\nimport {Button, FormControl, InputGroup, Modal} from \"react-bootstrap\";\nimport {showEditCol} from \"../../../redux/side-effects/actions\";\nimport {editCol} from \"../../../redux/form/actions\";\n\ninterface IProps {\n    col: { c: ICol, rid: string } | null,\n    hideModal: () => void\n    onEditCol: (d: { size: string, cid: string, rid: string }) => void\n}\n\nconst EditColModal = ({col, hideModal, onEditCol}: IProps) => {\n\n    const [value, setValue] = useState<string>(`${col ? col.c.size : 3}`)\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n        Number(e.target.value) <= 12 && setValue(e.target.value)\n\n    const handleSave = () => {\n        if (Number(value) > 12) {\n            alert('Not more 12')\n            return\n        }\n\n        onEditCol({\n            cid: col!.c.id,\n            size: value,\n            rid: col!.rid\n        })\n        hideModal()\n    }\n\n    useEffect(() => {\n        setValue(`${col ? col.c.size : 3}`)\n    }, [!!col])\n\n    return (\n        <Modal show={!!col} onHide={hideModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit column {col?.c.id}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <label htmlFor=\"edit-column\">Current size: {col?.c.size}</label>\n                <InputGroup className=\"mb-3\">\n                    <FormControl type={'number'} value={value} onChange={handleChange} placeholder={`${col?.c.size}`}/>\n                </InputGroup>\n\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hideModal}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default connect((store: IStore) => ({\n    col: store.sideEffect.editColModal\n}), (dispatch) => ({\n    hideModal: () => dispatch(showEditCol(null)),\n    onEditCol: (d: { size: string, cid: string, rid: string }) => dispatch(editCol(d))\n}))(EditColModal)\n","import React, {useState} from 'react'\nimport {connect} from \"react-redux\";\nimport {IStore} from \"../../../redux/rootReducer\";\nimport {IText} from \"../../../redux/form/reducer\";\nimport {Button, FormControl, InputGroup, Modal} from \"react-bootstrap\";\nimport {showEditTextField} from \"../../../redux/side-effects/actions\";\nimport {editText} from \"../../../redux/form/actions\";\n\ninterface IProps {\n    text: { c: IText, rid: string, cid: string } | null,\n    hideModal: () => void\n    onEditText: (d: { key: string, value: string, rid: string, cid: string, tid: string }) => void\n}\n\nconst EditTextModal = ({text, hideModal, onEditText}: IProps) => {\n\n    const [value, setValue] = useState<string>(text?.c.name || '')\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value)\n\n    const handleSave = () => {\n        onEditText({\n            rid: text!.rid,\n            cid: text!.cid,\n            tid: text!.c.id,\n            key: 'name',\n            value\n        })\n        hideModal()\n    }\n\n    return (\n        <Modal show={!!text} onHide={hideModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Edit text {text?.c.id}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <label htmlFor=\"edit-column\">Current label: {text?.c.name}</label>\n                <InputGroup className=\"mb-3\">\n                    <FormControl value={value} onChange={handleChange} placeholder={text?.c.name}/>\n                </InputGroup>\n\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hideModal}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default connect((store: IStore) => ({\n    text: store.sideEffect!.editTextModal!\n}), (dispatch) => ({\n    hideModal: () => dispatch(showEditTextField(null)),\n    onEditText: (d: { key: string, value: string, rid: string, cid: string, tid: string }) => dispatch(editText(d))\n}))(EditTextModal)\n","import React, {useEffect, useState} from 'react'\nimport {Button, FormGroup, ListGroup, Modal} from \"react-bootstrap\";\nimport {connect} from \"react-redux\";\nimport {IStore} from \"../../../redux/rootReducer\";\nimport {showEditSelect, showEditTextField} from \"../../../redux/side-effects/actions\";\nimport {ISelect} from \"../../../redux/form/reducer\";\nimport {editSelect} from \"../../../redux/form/actions\";\n\ninterface IProps {\n    select: { c: ISelect, rid: string, cid: string } | null,\n    hideModal: () => void\n    onEditSelect: (d: { key: string, value: string[] | string, rid: string, cid: string, id: string }) => void\n}\n\nconst EditSelectModal = ({hideModal, select, onEditSelect}: IProps) => {\n\n    const [values, setValues] = useState<string[]>(select?.c?.values || [])\n    const [value, setValue] = useState<string>('')\n    const [name, setName] = useState<string>('')\n\n    const handleSave = () => {\n        onEditSelect({\n            key: 'value',\n            rid: select!.rid,\n            cid: select!.cid,\n            id: select!.c.id,\n            value: values\n        })\n        if (name) {\n            onEditSelect({\n                key: 'name',\n                rid: select!.rid,\n                cid: select!.cid,\n                id: select!.c.id,\n                value: name\n            })\n        }\n        hideModal()\n    }\n\n    const onAdd = () => {\n        const isUniq = !values.find((v) => v === value)\n        if (isUniq && value) {\n            setValues([...values, value])\n        }\n    }\n    const onDelete = (value: string) => () => setValues(values.filter((v) => v !== value))\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => setValue(e.target.value)\n    const handleChangeName = (e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)\n\n    useEffect(() => {\n        setValues(select?.c?.values || [])\n    }, [select])\n\n    return (\n        <Modal show={!!select} onHide={hideModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>Select {select?.c?.id}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <label htmlFor=\"select_name\">Name</label>\n                <FormGroup\n                    placeholder={select?.c?.name || ''}\n                    id={'select_name'}\n                    onChange={handleChangeName}\n                    style={{width: '100%'}}\n                    as={'input'}\n                />\n                <label htmlFor=\"select_options\">Options</label>\n                <ListGroup>\n                    {values.map((v) => (\n                        <ListGroup.Item key={v} style={{display: 'flex'}}>\n                            {v}\n                            <Button variant=\"secondary\" style={{marginLeft: 'auto'}}\n                                    onClick={onDelete(v)}>Delete</Button>\n                        </ListGroup.Item>\n                    ))}\n                </ListGroup>\n\n                <FormGroup id={'select_options'} onChange={handleChange} style={{width: '100%', marginTop: '15px'}}\n                           as={'input'}/>\n                <Button variant=\"primary\" onClick={onAdd}>\n                    Add\n                </Button>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={hideModal}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleSave}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default connect((store: IStore) => ({\n    select: store.sideEffect!.editSelectModal\n}), (dispatch) => ({\n    hideModal: () => dispatch(showEditSelect(null)),\n    onEditSelect: (d: { key: string, value: string[] | string, rid: string, cid: string, id: string }) => dispatch(editSelect(d))\n}))(EditSelectModal)\n","import React from 'react';\nimport {Container, Row, Col} from \"react-bootstrap\";\nimport \"./app.css\"\nimport SideBar from \"./components/side-bar\";\nimport Form from \"./components/form\";\nimport DataView from \"./components/data-view\";\nimport EditColModal from \"./components/modals/edit-col-modal\";\nimport EditTextModal from \"./components/modals/edit-text-modal\";\nimport EditSelectModal from \"./components/modals/edit-select-modal\";\n\nfunction App() {\n\n    return (\n        <Container className={'main-container'}>\n            <Row>\n                <Col sm={2}>\n                    <SideBar/>\n                </Col>\n                <Col sm={7} className={'form-container'}>\n                    <Form/>\n                </Col>\n                <Col sm={3}>\n                    <DataView/>\n                </Col>\n            </Row>\n            <EditColModal/>\n            <EditTextModal/>\n            <EditSelectModal/>\n        </Container>\n    );\n}\n\nexport default App;\n","import uniqid from \"uniqid\";\nimport {COL, FORM, ROW} from \"./constants\";\nimport {createReducer} from '@reduxjs/toolkit'\nimport {\n    createCol,\n    createRow, createSelect,\n    createText,\n    deleteRow,\n    editCol, editSelect,\n    editText,\n    IAction,\n    removeCol,\n    removeColChild\n} from \"./actions\";\n\ninterface IContainer<T, C> {\n    id: string\n    type: T\n    children: C[]\n}\n\nexport interface IForm extends IContainer<FORM, IRow> {\n}\n\nexport interface IRow extends IContainer<ROW, ICol> {\n}\n\nexport interface ICol extends IContainer<COL, IText | ISelect> {\n    size: number\n}\n\nexport interface IText {\n    id: string\n    type: 'TEXT'\n    name: string\n    value: string\n}\n\nexport interface ISelect {\n    id: string\n    type: 'SELECT'\n    name: string\n    values: string[]\n    selected: string\n}\n\nconst initialState: IForm = {\n    id: uniqid(),\n    type: 'FORM',\n    children: []\n}\n\nexport default createReducer(initialState, (builder) => {\n    builder.addCase(createRow, (state, action: IAction<IRow>) => ({\n        ...state,\n        children: [...state.children, action.payload]\n    }))\n    builder.addCase(deleteRow, (state, action: IAction<string>) => ({\n        ...state,\n        children: state.children.filter((r) => r.id !== action.payload)\n    }))\n    builder.addCase(createCol, (state, action: IAction<string>) => {\n        const currentRow = state.children.find((r) => r.id === action.payload)\n        if (!currentRow) {\n            return state\n        }\n\n        let updatedRow: IRow = {\n            ...currentRow,\n            children: [...currentRow.children, {\n                id: uniqid(),\n                children: [],\n                type: 'COL',\n                size: 3\n            }]\n        }\n\n        return {\n            ...state,\n            children: state.children.map((r) => r.id === action.payload ? updatedRow : r)\n        }\n    })\n    builder.addCase(removeCol, (state, action: IAction<{ rid: string, cid: string }>) => {\n        const currentRow = state.children.find((r) => r.id === action.payload.rid)\n\n        if (!currentRow) {\n            return state\n        }\n\n        let updatedRow: IRow = {\n            ...currentRow,\n            children: currentRow.children.filter((r) => r.id !== action.payload.cid)\n        }\n\n        return {\n            ...state,\n            children: state.children.map((r) => r.id === action.payload.rid ? updatedRow : r)\n        }\n    })\n    builder.addCase(createText, (state, action: IAction<{ rid: string, cid: string }>) => {\n        const currentRow = state.children.find((r) => r.id === action.payload.rid)\n        const currentCol = currentRow && currentRow.children.find((r) => r.id === action.payload.cid)\n        if (!currentCol || !currentRow) {\n            return state\n        }\n\n        const updatedCol: ICol = {\n            ...currentCol,\n            children: [...currentCol.children, {\n                id: uniqid(),\n                name: 'Text',\n                type: 'TEXT',\n                value: ''\n            }]\n        }\n\n        const updatedRow: IRow = {\n            ...currentRow,\n            children: currentRow.children.map((c) => c.id === action.payload.cid ? updatedCol : c)\n        }\n\n        return {\n            ...state,\n            children: state.children.map((r) => r.id === action.payload.rid ? updatedRow : r)\n        }\n    })\n    builder.addCase(removeColChild, (state, action: IAction<{ rid: string, cid: string, id: string }>) => {\n        const currentRow = state.children.find((r) => r.id === action.payload.rid)\n        const currentCol = currentRow && currentRow.children.find((r) => r.id === action.payload.cid)\n        if (!currentCol || !currentRow) {\n            return state\n        }\n\n        const updatedCol: ICol = {\n            ...currentCol,\n            children: currentCol.children.filter((ch) => ch.id !== action.payload.id)\n        }\n\n        const updatedRow: IRow = {\n            ...currentRow,\n            children: currentRow.children.map((c) => c.id === action.payload.cid ? updatedCol : c)\n        }\n\n        return {\n            ...state,\n            children: state.children.map((r) => r.id === action.payload.rid ? updatedRow : r)\n        }\n    })\n    builder.addCase(editCol, (state, action: IAction<{ size: string, cid: string, rid: string }>) => {\n        const currentRow = state.children.find((r) => r.id === action.payload.rid)\n        const currentCol = currentRow && currentRow.children.find((r) => r.id === action.payload.cid)\n        if (!currentCol || !currentRow) {\n            return state\n        }\n\n        const updatedCol: ICol = {\n            ...currentCol,\n            size: Number(action.payload.size)\n        }\n\n        const updatedRow: IRow = {\n            ...currentRow,\n            children: currentRow.children.map((c) => c.id === action.payload.cid ? updatedCol : c)\n        }\n\n        return {\n            ...state,\n            children: state.children.map((r) => r.id === action.payload.rid ? updatedRow : r)\n        }\n    })\n    builder.addCase(editText, (state,\n                               action: IAction<{ key: string, value: string, rid: string, cid: string, tid: string }>) => {\n        const currentRow = state.children.find((r) => r.id === action.payload.rid)\n        const currentCol = currentRow && currentRow.children.find((r) => r.id === action.payload.cid)\n        const currentText = currentCol && currentCol.children.find((ch) => ch.id === action.payload.tid)\n\n        if (!currentCol || !currentRow || !currentText) {\n            return state\n        }\n\n        const updatedText = {\n            ...currentText,\n            [action.payload.key]: action.payload.value\n        }\n\n        const updatedCol: ICol = {\n            ...currentCol,\n            children: currentCol.children.map((c) => c.id === action.payload.tid ? updatedText : c)\n        }\n\n        const updatedRow: IRow = {\n            ...currentRow,\n            children: currentRow.children.map((c) => c.id === action.payload.cid ? updatedCol : c)\n        }\n\n        return {\n            ...state,\n            children: state.children.map((r) => r.id === action.payload.rid ? updatedRow : r)\n        }\n    })\n    builder.addCase(createSelect, (state, action: IAction<{ rid: string, cid: string }>) => {\n        const currentRow = state.children.find((r) => r.id === action.payload.rid)\n        const currentCol = currentRow && currentRow.children.find((r) => r.id === action.payload.cid)\n        if (!currentCol || !currentRow) {\n            return state\n        }\n\n        const updatedCol: ICol = {\n            ...currentCol,\n            children: [...currentCol.children, {\n                id: uniqid(),\n                name: 'Select',\n                type: 'SELECT',\n                values: ['Audi','BMW','Mercedes'],\n                selected: ''\n            }]\n        }\n\n        const updatedRow: IRow = {\n            ...currentRow,\n            children: currentRow.children.map((c) => c.id === action.payload.cid ? updatedCol : c)\n        }\n\n        return {\n            ...state,\n            children: state.children.map((r) => r.id === action.payload.rid ? updatedRow : r)\n        }\n    })\n    builder.addCase(editSelect, (state,\n                               action: IAction<{ key: string, value: string[] | string, rid: string, cid: string, id: string }>) => {\n        const currentRow = state.children.find((r) => r.id === action.payload.rid)\n        const currentCol = currentRow && currentRow.children.find((r) => r.id === action.payload.cid)\n        const currentSelect = currentCol && currentCol.children.find((ch) => ch.id === action.payload.id)\n\n        if (!currentCol || !currentRow || !currentSelect) {\n            return state\n        }\n\n        const updatedText = {\n            ...currentSelect,\n            [action.payload.key]: action.payload.value\n        }\n\n        const updatedCol: ICol = {\n            ...currentCol,\n            children: currentCol.children.map((c) => c.id === action.payload.id ? updatedText : c)\n        }\n\n        const updatedRow: IRow = {\n            ...currentRow,\n            children: currentRow.children.map((c) => c.id === action.payload.cid ? updatedCol : c)\n        }\n\n        return {\n            ...state,\n            children: state.children.map((r) => r.id === action.payload.rid ? updatedRow : r)\n        }\n    })\n})\n","import {createReducer} from \"@reduxjs/toolkit\";\nimport {IAction} from \"../form/actions\";\nimport {activateDrag, showEditCol, showEditSelect, showEditTextField} from \"./actions\";\nimport {ICol, ISelect, IText} from \"../form/reducer\";\n\nexport interface ISideEffect {\n    editColModal: { c: ICol, rid: string } | null\n    editTextModal: { c: IText, rid: string, cid: string } | null\n    editSelectModal: { c: ISelect, rid: string, cid: string } | null\n    componentDrag: {\n        type: string | null\n        active: boolean\n    }\n}\n\nconst initialState: ISideEffect = {\n    editColModal: null,\n    editTextModal: null,\n    editSelectModal: null,\n    componentDrag: {\n        type: null,\n        active: false\n    }\n}\n\nexport default createReducer(initialState, (builder) => {\n    builder.addCase(showEditCol, (state, action: IAction<{ c: ICol, rid: string } | null>) => ({\n        ...state,\n        editColModal: action.payload\n    }))\n    builder.addCase(showEditTextField, (state, action: IAction<{ c: IText, rid: string, cid: string } | null>) => ({\n        ...state,\n        editTextModal: action.payload\n    }))\n    builder.addCase(showEditSelect, (state, action: IAction<{ c: ISelect, rid: string, cid: string } | null>) => ({\n        ...state,\n        editSelectModal: action.payload\n    }))\n    builder.addCase(activateDrag, (state, action: IAction<{ type?: null | string, active?: boolean }>) => ({\n        ...state,\n        componentDrag: {\n            ...state.componentDrag,\n            ...action.payload\n        }\n    }))\n})\n","import { combineReducers } from 'redux';\nimport reducer, {IForm} from './form/reducer';\nimport sideEffect, {ISideEffect} from './side-effects';\n\nexport interface IStore {\n    form: IForm\n    sideEffect: ISideEffect\n}\n\nexport default combineReducers<IStore>({\n    form: reducer,\n    sideEffect\n});\n","import { createStore } from 'redux';\nimport rootReducer from \"./rootReducer\";\n\nconst store = createStore(\n    rootReducer,\n);\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from \"./redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}